parameters:
  name: ""
  arch: ""
  chocoPackages: []
  displayName: ""
  cmakeGenName: ""
  cmakeGenToolsetArg: ""
  vmImage: "windows-latest"
  extraPath: ""
  # Default to 32-bit
  cmakeAlwaysFlags: "-A $(arch)"
  variants:
    - CXXFLAGS: ""
      LDFLAGS: ""
      VARIANT: "normal"
      CMAKEFLAGS: "-D CMAKE_MSVC_WPO=OFF"
    - CXXFLAGS: ""
      LDFLAGS: ""
      VARIANT: "wpo"
      CMAKEFLAGS: "-D CMAKE_MSVC_WPO=ON"

jobs:
- job: Build_Exes_${{parameters.name}}
  displayName: Build Exes using ${{parameters.displayName}}
  pool:
    vmImage: ${{ parameters.vmImage }}
  variables:
    PUBLISH_DIR: $(Pipeline.Workspace)/publish
    DOWNLOAD_DIR: $(Pipeline.Workspace)/cvdump
    CVDUMP_EXE: $(DOWNLOAD_DIR)/cvdump.exe
    CVDUMP_URL: 'https://github.com/microsoft/microsoft-pdb/raw/master/cvdump/cvdump.exe'
    PIP_CACHE_DIR: $(Pipeline.Workspace)/pipcache
  steps:
  - task: Cache@2
    inputs:
      key: 'chocolatey | "$(Agent.OS)" | ${{ join(1, parameters.chocoPackages) }} '
      # Even if we don't have a cache for chocoPackage, better to use _a_ cache since it should include cmake
      restoreKeys: |
        chocolatey | "$(Agent.OS)"
      path: $(CHOCOLATEY_CACHE_DIR)
    displayName: Chocolatey cache
  - script: choco source add -n=ed -s "$(CHOCOLATEY_REPO)"
    displayName: Add chocolatey repo
  - script: choco config set cacheLocation "$(CHOCOLATEY_CACHE_DIR)"
    displayName: Set chocolatey cache dir
  - script: choco install -y cmake
    displayName: Install cmake
  - ${{ each p in parameters.chocoPackages }}:
    - script: choco install --timeout 0 --pre -d -y ${{ p }}
      displayName: Install ${{ parameters.displayName }} (${{ p }})
      # continueOnError: true # for debugging
  - script: |
      cat $(CHOCOLATEY_CACHE_DIR)\vs.log
      cat C:\ProgramData\chocolatey\logs\chocolatey.log
      fail >nul
    displayName: Debug
    condition: failed()
  - script: |
      echo ##vso[task.prependpath]${{ parameters.extraPath }}
    displayName: Add extra path
    condition: and(succeeded(), ne('${{ parameters.extraPath}}', ''))
  - ${{ each v in parameters.variants }}:
    - script: |
        @echo on
        cd tests/src/oo
        mkdir build-${{ v.VARIANT }}
        cd build-${{ v.VARIANT }}
        echo ##vso[task.prependpath]%ProgramFiles%\\cmake\\bin
        cmake.exe -E env CXXFLAGS="${{ v.CXXFLAGS }}" LDFLAGS="${{ v.LDFLAGS }}" cmake.exe ${{ parameters.cmakeAlwaysFlags }} ${{ v.CMAKEFLAGS }} -G "${{ parameters.cmakeGenName }}" ${{ parameters.cmakeGenToolsetArg }} ..
        cmake.exe --build . --verbose --config Debug
        cmake.exe --build . --verbose --config Lite || VER>NUL
        cmake.exe --build . --verbose --config Release
        cmake.exe --build . --verbose --config RelWithDebInfo
        mkdir "%variantDir%"
        move Debug "%variantDir%"
        move Lite "%variantDir%"
        move Release "%variantDir%"
        move RelWithDebInfo "%variantDir%"
      displayName: Build variant ${{ v.VARIANT }}
      env:
        variantDir: "$(PUBLISH_DIR)\\${{ parameters.name }}\\${{ v.VARIANT }}"
  - publish: $(PUBLISH_DIR)
