parameters:
- name: vsVersionList
  type: object
  default:


    - name: "vs2012_2022gen"
      chocoPackages:
        - "msvisualstudio-2012express"
      displayName: "Visual C++ Express 2012"
      # https://cmake.org/cmake/help/latest/generator/Visual%20Studio%2011%202012.html
      # Removed. This once generated Visual Studio 11 2012 project files, but the generator has been removed since CMake 3.28. It is still possible to build with VS 11 2012 tools using the Visual Studio 14 2015 (or above) generator with CMAKE_GENERATOR_TOOLSET set to v110, or by using the NMake Makefiles generator.
      # why doesn't the vs2022 generator work?
      cmakeGenName: "Visual Studio 17 2022"
      # cmakeGenName: "Visual Studio 12 2013"
      cmakeGenToolsetArg: "-T v110"
      extraPath: "%SystemRoot%\\Microsoft.NET\\Framework\\v4.0.30319"

    - name: "vs2012_2013gen"
      chocoPackages:
        - "msvisualstudio-2012express"
        - "msvisualstudio-2013express" # just so the 2013 generator works...
      displayName: "Visual C++ Express 2012"
      # https://cmake.org/cmake/help/latest/generator/Visual%20Studio%2011%202012.html
      # Removed. This once generated Visual Studio 11 2012 project files, but the generator has been removed since CMake 3.28. It is still possible to build with VS 11 2012 tools using the Visual Studio 14 2015 (or above) generator with CMAKE_GENERATOR_TOOLSET set to v110, or by using the NMake Makefiles generator.
      # why doesn't the vs2022 generator work?
      #cmakeGenName: "Visual Studio 17 2022"
      cmakeGenName: "Visual Studio 12 2013"
      cmakeGenToolsetArg: "-T v110"
      extraPath: "%SystemRoot%\\Microsoft.NET\\Framework\\v4.0.30319"

- name: archList
  type: object
  default:
    - name: 'x86'
      displayName: 'x86'
      cmakeArch: 'win32'
      toolsetArch: 'x86'

    - name: 'x86_64'
      displayName: 'x86-64'
      cmakeArch: 'x64'
      toolsetArch: 'x64'

variables:
  CHOCOLATEY_CACHE_DIR: $(Pipeline.Workspace)\chocolatey_cache
  CHOCOLATEY_REPO: 'https://pkgs.dev.azure.com/edmcman/choco-vc/_packaging/choco-vc@Local/nuget/v2'

jobs:
- ${{ each vsVersion in parameters.vsVersionList }}:
  - ${{ each arch in parameters.archList }}:
    - ${{ if not(and(eq(vsVersion.has64, false), eq(arch.name, 'x86_64'))) }}:
      - template: azure-pipelines/Build_Exes.yaml
        parameters:
          name: ${{ vsVersion.name }}_${{ arch.name }}
          #arch: ${{ arch.name }}
          chocoPackages: ${{ vsVersion.chocoPackages }}
          displayName: ${{ vsVersion.displayName }} ${{ arch.displayName }}
          cmakeAlwaysFlags: -A ${{ arch.cmakeArch }}
          cmakeGenName: ${{ vsVersion.cmakeGenName }}
          ${{ if ne(vsVersion.cmakeGenToolsetArg, '') }}:
            cmakeGenToolsetArg: ${{ vsVersion.cmakeGenToolsetArg }},host=${{ arch.toolsetArch }}
          ${{ if eq(vsVersion.cmakeGenToolsetArg, '') }}:
            cmakeGenToolsetArg:
          extraPath: ${{ vsVersion.extraPath }}               

- job: CombineArtifacts
  pool:
    vmImage: windows-latest
  dependsOn: # Build_Exes_${{parameters.name}}
    - ${{ each vsVersion in parameters.vsVersionList }}:
      - ${{ each arch in parameters.archList }}:
        - ${{ if not(and(eq(vsVersion.has64, false), eq(arch.name, 'x86_64'))) }}:
          - Build_Exes_${{ vsVersion.name }}_${{ arch.name }}
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      dtargetPath: '$(System.ArtifactsDirectory)'
  - task: PublishPipelineArtifact@1
    inputs:
      PathToPublish: '$(System.ArtifactsDirectory)'
      artifactName: AllArtifacts
